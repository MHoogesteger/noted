#!/bin/bash

set -e

#
# START FUNCTIONS (alphabetical order)
#

checkForEnvVariable() {
  varval=${!1}
  if [ ! "$(echo $varval)" ]; then
    cat <<EOF

ERROR

    A required environment variable is not available:
    $1

EOF
    exit 1
  fi
}

create() {
  newNoteFile() {
    fileheaderText="$@"
    result="${FILE_TEMPLATE_TEXT}"
    result="${result/FILEHEADERTEXT/$fileheaderText}"
    result="${result/FILETIMESTAMP/$filetimestamp}"
    echo -e "\n$result\n"
  }
  newEntry() {
    entryheaderText="$@"
    result="${ENTRY_TEMPLATE_TEXT}"
    result="${result/ENTRYHEADERTEXT/$entryheaderText}"
    result="${result/ENTRYTIMESTAMP/$entrytimestamp}"
    echo -e "\n$result\n"
  }
  FILE_TEMPLATE_TEXT=""
  if [ -f "${NOTED_FILE_TEMPLATE_FILE}" ]; then
    # use template file
    FILE_TEMPLATE_TEXT=$(<"${NOTED_FILE_TEMPLATE_FILE}")
  else
    read -r -d '' FILE_TEMPLATE_TEXT <<EOF || true
---
FILETIMESTAMP

# FILEHEADERTEXT


---
EOF
  fi
  ENTRY_TEMPLATE_TEXT=""
  if [ -f "${NOTED_ENTRY_TEMPLATE_FILE}" ]; then
    # use template file
    ENTRY_TEMPLATE_TEXT=$(<"${NOTED_ENTRY_TEMPLATE_FILE}")
  else
    read -r -d '' ENTRY_TEMPLATE_TEXT <<EOF || true
---
ENTRYTIMESTAMP

# ENTRYHEADERTEXT


---
EOF
  fi
  mkdir -p "${NOTED_MARKDOWN_HOME}"
  fileName="${filenamedate}"
  fileHeader="${fileheadertimestamp}"
  if [[ -n "${OPTIONAL_FILE}" ]]; then
    fileName="${OPTIONAL_FILE}"
    fileHeader="${OPTIONAL_FILE}"
  fi
  markdownFile "${fileName}"
  if [[ ! -f "${markdownFile}" ]]
  then
    echo "Creating new note file with name ${fileName}"
    touch "${markdownFile}"
    newNoteFile "${fileHeader}" >>"${markdownFile}"
  fi
  if [ -n "${OPTIONAL_NOTE}" ]; then
    # Supplying a note means automatically add that to the file
    newEntry "${OPTIONAL_NOTE}" >>"${markdownFile}"
    echo "Added note to note file"
  else
    # otherwise open it up with the template and let them edit
    newEntry >>"${markdownFile}"
    edit "${markdownFile}"
  fi
}

edit() {
  open "${markdownFile}"
}

loadProperties() {
  if [[ -f "${CONFIG_FILE}" ]]; then
    source "${CONFIG_FILE}"
  fi
}

markdownFile() {
  markdownFile="${NOTED_MARKDOWN_HOME}/${1}.md"
}

ngrep() {
  grep --recursive "$@" "${NOTED_MARKDOWN_HOME}"
}

outputConfig() {
  echo "The following configuration is currently being used:"
  echo "NOTED_MARKDOWN_HOME=${NOTED_MARKDOWN_HOME}"
  echo "NOTED_FILE_NAME_DATE_FORMAT=${NOTED_FILE_NAME_DATE_FORMAT}"
  echo "NOTED_FILE_TIMESTAMP_FORMAT=${NOTED_FILE_TIMESTAMP_FORMAT}"
  echo "NOTED_ENTRY_TIMESTAMP_FORMAT=${NOTED_ENTRY_TIMESTAMP_FORMAT}"
  echo "NOTED_FILE_TEMPLATE_FILE=${NOTED_FILE_TEMPLATE_FILE:-<<DEFAULT>>}"
  echo "NOTED_ENTRY_TEMPLATE_FILE=${NOTED_FILE_TEMPLATE_FILE:-<<DEFAULT>>}"
  echo "NOTED_TODO_MARKER=${NOTED_TODO_MARKER}"
}

validate() {
  if [ -z "$1" ]; then
    echo "${2}"
    exit 1
  fi
}

version() {
  echo "noted v${VERSION}"
}

view() {
  open "${htmlFile}"
}

#
# END FUNCTIONS
#

VERSION="0.0.3"

#
# Default Settings
#
# Settings that cannot be overridden
# Location of config file
CONFIG_FILE=$HOME/.notedconfig

# Settings that can be overridden from properties
# name files like this
NOTED_FILE_NAME_DATE_FORMAT="+%Y-%m-%d"
# timestamp entries within the files like this
NOTED_FILE_TIMESTAMP_FORMAT="+%H:%M:%S UTC"
NOTED_FILEHEADER_TIMESTAMP_FORMAT="+%A %d %B %Y"
NOTED_ENTRY_TIMESTAMP_FORMAT="+%H:%M:%S UTC"
NOTED_FILE_TEMPLATE_FILE=""
NOTED_ENTRY_TEMPLATE_FILE=""
# keep the directory where notes are stored here
NOTED_MARKDOWN_HOME=$HOME/Documents/notes
NOTED_TODO_MARKER="TODO"

#
# Override with any additional settings
#
loadProperties

filenamedate=$(date "${NOTED_FILE_NAME_DATE_FORMAT}")
filetimestamp=$(date "${NOTED_FILE_TIMESTAMP_FORMAT}")
fileheadertimestamp=$(date "${NOTED_FILEHEADER_TIMESTAMP_FORMAT}")
entrytimestamp=$(date "${NOTED_ENTRY_TIMESTAMP_FORMAT}")

todaysFile="${NOTED_MARKDOWN_HOME}/${filenamedate}.md"

subcommand="$1"
if  [[ "${subcommand}" == "config" ]]; then
  outputConfig
elif [[ "${subcommand}" == "version" ]]; then
  version
elif [[ "${subcommand}" == "build" ]]; then
	if ! pgrep -x "hugo" >/dev/null; then
		hugo server -D -s ${NOTED_MARKDOWN_HOME}/../.. >/dev/null &
	fi
	firefox localhost:1313
elif [[ "${subcommand}" == "sync" ]]; then
	if ! pgrep -x "git" >/dev/null; then
		commmess="$(date)"$  
		git -C ${NOTED_MARKDOWN_HOME} fetch
		git -C ${NOTED_MARKDOWN_HOME} add -A
		git -C ${NOTED_MARKDOWN_HOME} commit -m "auto_sync ${commmess}"
		git -C ${NOTED_MARKDOWN_HOME} push
	fi
	firefox localhost:1313
elif [[ "${subcommand}" == "edit" ]] || [[ "${subcommand}" == "view" ]]; then
  arg="$2"
  if [[ -z "${arg}" ]]; then
    arg="${filenamedate}"
  fi
  markdownFile "${arg}"
  edit "${markdownFile}"
elif [[ "${subcommand}" == "grep" ]]; then
  shift
  ngrep "$@"
elif [[ "${subcommand}" == 'todos' ]]; then
  fgrep -rH "${NOTED_TODO_MARKER}" "${NOTED_MARKDOWN_HOME}" | fgrep -v ~~
  if [ 1 == $? ]; then echo "Congratulations! No TODOs found!"; fi
  echo
else
  # create / default
  OPTIONAL_FILE=""
  OPTIONAL_NOTE=""
  if [[ "${subcommand}" == "create" ]]; then
    shift
  fi
  if [[ -n "$1" ]]; then
    OPTIONAL_NOTE="$1"
  fi
  if [[ -n "$2" ]]; then
    OPTIONAL_FILE="$2"
  fi
  create "${OPTIONAL_NOTE}" "${OPTIONAL_FILE}"
fi
